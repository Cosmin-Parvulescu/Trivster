#!/usr/bin/env node

/**
 * Tha game object
 */

var Game = require('../game').Game;

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('trivster:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Configure socket events
 */

 var game = new Game();

 var io = require('socket.io')(server);
 io.on('connection', function(socket) {
     socket.on('join', function(room) {
         socket.join(room, function(err) {
             if(err) {
                 socket.emit('error', err);
             }
         });

         game.addPlayer({
            id: socket.client.id
         }, room);

         socket.room = room;

         var joinMessage = socket.client.id + ' joined the room';

         socket.emit('update', { message: joinMessage });
         socket.broadcast.to(room).emit('update', { message: joinMessage });
     });

     socket.on('disconnect', function() {
         socket.leave(socket.room);
         socket.broadcast.to(socket.room).emit('update', { message: socket.client.id + ' left the room' });

         game.removePlayer(socket.client.id, socket.room);
     });
 });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
